global !p
def complete(t, opts):
	if t:
		opts = [ m[len(t):] for m in opts if m.startswith(t) ]
	if(len(opts) == 1):
		return opts[0]
	return "(" + "|".join(opts) + ")"
endglobal

snippet comment-m "insert a comment with name and date" b
/**
 * $1
 *  
 * `git config user.name`
 * `!v strftime("%a %d %b %Y")`
 **/
endsnippet

snippet comment-i "insert an inline comment"
/* ${VISUAL}${0} `git config user.name | git config user.name | sed -E 's/^([A-Z]).+ (.+)/\1. \2/'`  `!v strftime("%m.%d.%y")` **/
endsnippet

snippet comment-is "insert a simple inline comment"
/* ${VISUAL}${0} **/
endsnippet


snippet todo "insert a TODO comment"
/* TODO: ${VISUAL}${0} `git config user.name`  `!v strftime("%a %d %b %Y")` **/
endsnippet

snippet fixme "insert a FIXME comment"
/* FIXME: ${VISUAL}${0} `git rev-parse --abbrev-ref HEAD` **/
endsnippet

snippet sig "add signature with date"
`git config user.name`  `!v strftime("%a %d %b %Y")`
endsnippet

snippet log "log to the console"
console.log('%c ${1:variableName}', "color: $2`!p snip.rv=complete(t[2], ['royalblue', 'blueviolet', 'chartreuse', 'fuchsia'])`; font-size: 14px; font-weight: bold;", $1)
endsnippet

snippet UUID "UUID" !b
`!p import uuid
if not snip.c:
 snip.rv = uuid.uuid4().hex`
endsnippet

snippet eslint-dnl "eslint-disable-next-line"
/* eslint-disable-next-line ${VISUAL}${0:react-hooks/exhaustive-deps} */
endsnippet

snippet tslint-dnl "tslint:disable-next-line:"
/* tslint:disable-next-line:${VISUAL}${0:no-unsafe-any} */
endsnippet

snippet t_desc
describe('$1', () => {
  it('${2:should}', () => {
    const actual = {}
    const expected = {}
    expect(actual).toEqual(expected)
  })
})
endsnippet

snippet t_it
it('should $1', () => {
  const actual = ${2:{}}
  const expected = ${0:{}}
  expect(actual).toEqual(expected)
})
endsnippet


snippet shrugi
¯\_(ツ)_/¯
endsnippet
